{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fucc1\\\\react-guide-material\\\\07_styling_component\\\\src\\\\050_chakra_ui\\\\start\\\\components\\\\Form.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { HStack, Input, Button, useToast } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = _ref => {\n  _s();\n  let {\n    createTodo\n  } = _ref;\n  const [enteredTodo, setEnteredTodo] = useState(\"\");\n  const toast = useToast();\n  const addTodo = e => {\n    e.preventDefault();\n    if (!enteredTodo) {\n      toast({\n        title: \"新しいタスクを入力して下さい\",\n        status: \"info\",\n        duration: 2000,\n        isClosable: true\n      });\n      return;\n    }\n    const newTodo = {\n      id: Math.floor(Math.random() * 1e5),\n      content: enteredTodo\n    };\n    createTodo(newTodo);\n    setEnteredTodo(\"\");\n    toast({\n      title: \"新しいタスクを追加しました！\",\n      description: enteredTodo,\n      status: \"info\",\n      duration: 3000,\n      isClosable: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: addTodo,\n    children: /*#__PURE__*/_jsxDEV(HStack, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"\\u65B0\\u3057\\u3044\\u30BF\\u30B9\\u30AF\",\n        _placeholder: {\n          opacity: \"0.3\",\n          color: \"gray.500\"\n        },\n        size: \"lg\",\n        p: 3,\n        variant: \"flushed\",\n        value: enteredTodo,\n        onChange: e => setEnteredTodo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        size: \"md\",\n        bgColor: \"white\",\n        variant: \"outline\",\n        px: 7,\n        type: \"submit\",\n        children: \"\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"r/bsdWTZpam4gO8vl0VbknnJVmw=\", false, function () {\n  return [useToast];\n});\n_c = Form;\nexport default Form;\n\n// 元々の記述\n\n// import { useState } from \"react\";\n// const Form = ({ createTodo }) => {\n//   const [enteredTodo, setEnteredTodo] = useState(\"\");\n\n//   const addTodo = (e) => {\n//     e.preventDefault();\n\n//     const newTodo = {\n//       id: Math.floor(Math.random() * 1e5),\n//       content: enteredTodo,\n//     };\n\n//     createTodo(newTodo);\n\n//     setEnteredTodo(\"\");\n//   };\n//   return (\n//     <div>\n//       <form onSubmit={addTodo}>\n//         <input\n//           type=\"text\"\n//           value={enteredTodo}\n//           onChange={(e) => setEnteredTodo(e.target.value)}\n//         />\n//         <button>追加</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","HStack","Input","Button","useToast","jsxDEV","_jsxDEV","Form","_ref","_s","createTodo","enteredTodo","setEnteredTodo","toast","addTodo","e","preventDefault","title","status","duration","isClosable","newTodo","id","Math","floor","random","content","description","onSubmit","children","placeholder","_placeholder","opacity","color","size","p","variant","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","colorScheme","bgColor","px","type","_c","$RefreshReg$"],"sources":["C:/Users/fucc1/react-guide-material/07_styling_component/src/050_chakra_ui/start/components/Form.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { HStack, Input, Button, useToast } from \"@chakra-ui/react\";\r\n\r\nconst Form = ({ createTodo }) => {\r\n  const [enteredTodo, setEnteredTodo] = useState(\"\");\r\n\r\n  const toast = useToast();\r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!enteredTodo) {\r\n      toast({\r\n        title: \"新しいタスクを入力して下さい\",\r\n        status: \"info\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      id: Math.floor(Math.random() * 1e5),\r\n      content: enteredTodo,\r\n    };\r\n\r\n    createTodo(newTodo);\r\n\r\n    setEnteredTodo(\"\");\r\n    toast({\r\n      title: \"新しいタスクを追加しました！\",\r\n      description: enteredTodo,\r\n      status: \"info\",\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n  return (\r\n    <form onSubmit={addTodo}>\r\n      <HStack>\r\n        {/* POINT ChakraのInputコンポーネントを使う  */}\r\n        <Input\r\n          placeholder=\"新しいタスク\"\r\n          _placeholder={{ opacity: \"0.3\", color: \"gray.500\" }}\r\n          size=\"lg\"\r\n          p={3}\r\n          variant=\"flushed\"\r\n          value={enteredTodo}\r\n          onChange={(e) => setEnteredTodo(e.target.value)}\r\n        />\r\n        <Button\r\n          colorScheme=\"blue\"\r\n          size=\"md\"\r\n          bgColor=\"white\"\r\n          variant=\"outline\"\r\n          px={7}\r\n          type=\"submit\"\r\n        >\r\n          追加\r\n        </Button>\r\n      </HStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n\r\n\r\n\r\n// 元々の記述\r\n\r\n// import { useState } from \"react\";\r\n// const Form = ({ createTodo }) => {\r\n//   const [enteredTodo, setEnteredTodo] = useState(\"\");\r\n\r\n//   const addTodo = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const newTodo = {\r\n//       id: Math.floor(Math.random() * 1e5),\r\n//       content: enteredTodo,\r\n//     };\r\n\r\n//     createTodo(newTodo);\r\n\r\n//     setEnteredTodo(\"\");\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={addTodo}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={enteredTodo}\r\n//           onChange={(e) => setEnteredTodo(e.target.value)}\r\n//         />\r\n//         <button>追加</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Form;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,IAAI,GAAGC,IAAA,IAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC;EAAW,CAAC,GAAAF,IAAA;EAC1B,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMa,KAAK,GAAGT,QAAQ,CAAC,CAAC;EAExB,MAAMU,OAAO,GAAIC,CAAC,IAAK;IACrBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACL,WAAW,EAAE;MAChBE,KAAK,CAAC;QACJI,KAAK,EAAE,gBAAgB;QACvBC,MAAM,EAAE,MAAM;QACdC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACF;IACF;IAEA,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MACnCC,OAAO,EAAEf;IACX,CAAC;IAEDD,UAAU,CAACW,OAAO,CAAC;IAEnBT,cAAc,CAAC,EAAE,CAAC;IAClBC,KAAK,CAAC;MACJI,KAAK,EAAE,gBAAgB;MACvBU,WAAW,EAAEhB,WAAW;MACxBO,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;EACJ,CAAC;EACD,oBACEd,OAAA;IAAMsB,QAAQ,EAAEd,OAAQ;IAAAe,QAAA,eACtBvB,OAAA,CAACL,MAAM;MAAA4B,QAAA,gBAELvB,OAAA,CAACJ,KAAK;QACJ4B,WAAW,EAAC,sCAAQ;QACpBC,YAAY,EAAE;UAAEC,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAW,CAAE;QACpDC,IAAI,EAAC,IAAI;QACTC,CAAC,EAAE,CAAE;QACLC,OAAO,EAAC,SAAS;QACjBC,KAAK,EAAE1B,WAAY;QACnB2B,QAAQ,EAAGvB,CAAC,IAAKH,cAAc,CAACG,CAAC,CAACwB,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACFrC,OAAA,CAACH,MAAM;QACLyC,WAAW,EAAC,MAAM;QAClBV,IAAI,EAAC,IAAI;QACTW,OAAO,EAAC,OAAO;QACfT,OAAO,EAAC,SAAS;QACjBU,EAAE,EAAE,CAAE;QACNC,IAAI,EAAC,QAAQ;QAAAlB,QAAA,EACd;MAED;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAClC,EAAA,CA5DIF,IAAI;EAAA,QAGMH,QAAQ;AAAA;AAAA4C,EAAA,GAHlBzC,IAAI;AA8DV,eAAeA,IAAI;;AAInB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}